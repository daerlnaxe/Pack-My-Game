<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessF" xml:space="preserve">
    <value>Access folders</value>
  </data>
  <data name="Arch_Struc" xml:space="preserve">
    <value>Archive structure</value>
  </data>
  <data name="CheatCodes" xml:space="preserve">
    <value>Cheat Codes</value>
  </data>
  <data name="ChooseLBf" xml:space="preserve">
    <value>Choose the LaunchBox folder</value>
  </data>
  <data name="Choose_Root" xml:space="preserve">
    <value>Choose root, without platform Name.</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="DeSelect_all" xml:space="preserve">
    <value>Deselect All</value>
  </data>
  <data name="Err_FolderC" xml:space="preserve">
    <value>Folder creation denied, look if you have rights to write into the application folder.</value>
  </data>
  <data name="Err_LaunchBoxF" xml:space="preserve">
    <value>LaunchBox folder doesn't exist.</value>
  </data>
  <data name="Err_PlatformsF" xml:space="preserve">
    <value>Platforms xml file is unreachable.</value>
  </data>
  <data name="Game" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="Games" xml:space="preserve">
    <value>Games</value>
  </data>
  <data name="Images" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="Intro" xml:space="preserve">
    <value>Please, choose a method to unpack:</value>
  </data>
  <data name="I_AdminRights" xml:space="preserve">
    <value>You need admin rights</value>
  </data>
  <data name="I_Copy" xml:space="preserve">
    <value>Copy of</value>
  </data>
  <data name="I_DelByYourself" xml:space="preserve">
    <value>You must delete manually this folder</value>
  </data>
  <data name="I_EBMethod" xml:space="preserve">
    <value>Enhanced Backup method: use paths from EBGame.xml to copy files, LaunchBox will create at the next launch the platform, but you will have to specify folders (you can use SappPasRoot plugin).It's the last luck method. </value>
  </data>
  <data name="I_HitEnter" xml:space="preserve">
    <value>Hit enter to valid.</value>
  </data>
  <data name="I_LaunchboxMethod" xml:space="preserve">
    <value>LaunchBox method: use LaunchBox paths to copy files.</value>
  </data>
  <data name="I_OneG" xml:space="preserve">
    <value>Please select a game:</value>
  </data>
  <data name="I_RFolder" xml:space="preserve">
    <value>Reset a Folder</value>
  </data>
  <data name="I_SevG" xml:space="preserve">
    <value>Please select the folder:</value>
  </data>
  <data name="I_TBMethod" xml:space="preserve">
    <value>True Backup method: uses paths from platform file backed, inject platform to general LaunchBox platform file, inject game to specific plartform file (or create).</value>
  </data>
  <data name="I_XML" xml:space="preserve">
    <value>Please select a xml file.</value>
  </data>
  <data name="Launchbox" xml:space="preserve">
    <value>UnPack for Launchbox</value>
  </data>
  <data name="LaunchBoxF" xml:space="preserve">
    <value>LaunchBox folder</value>
  </data>
  <data name="Manual" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="Manuals" xml:space="preserve">
    <value>Manuals</value>
  </data>
  <data name="Music" xml:space="preserve">
    <value>Music</value>
  </data>
  <data name="Musics" xml:space="preserve">
    <value>Musics</value>
  </data>
  <data name="NoElem" xml:space="preserve">
    <value>No element</value>
  </data>
  <data name="No_Game" xml:space="preserve">
    <value>No game selected.</value>
  </data>
  <data name="NullValue" xml:space="preserve">
    <value>Null value</value>
  </data>
  <data name="OneG" xml:space="preserve">
    <value>One Game</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="O_ChangeAllPlatforms" xml:space="preserve">
    <value>Change platform if different (useful when different system name exist)</value>
  </data>
  <data name="O_InjectCF" xml:space="preserve">
    <value>Inject Custom Fields</value>
  </data>
  <data name="Pivot" xml:space="preserve">
    <value>Pivot</value>
  </data>
  <data name="Platform" xml:space="preserve">
    <value>Platform</value>
  </data>
  <data name="Process" xml:space="preserve">
    <value>Process</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="Q_Continue" xml:space="preserve">
    <value>Are you sure you want to continue ?</value>
  </data>
  <data name="ResetF" xml:space="preserve">
    <value>Reset Factory</value>
  </data>
  <data name="Select_All" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="SevG" xml:space="preserve">
    <value>X-Games</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="S_Folder" xml:space="preserve">
    <value>Select a folder</value>
  </data>
  <data name="S_Package" xml:space="preserve">
    <value>Select a package</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="T_AccessF" xml:space="preserve">
    <value>Define where files will be copied.</value>
  </data>
  <data name="T_OneG" xml:space="preserve">
    <value>Unpack one game</value>
  </data>
  <data name="T_SevG" xml:space="preserve">
    <value>Unpack several games</value>
  </data>
  <data name="Usability" xml:space="preserve">
    <value>Usability</value>
    <comment>no more used? </comment>
  </data>
  <data name="Validate" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="Video" xml:space="preserve">
    <value>Video</value>
  </data>
  <data name="Videos" xml:space="preserve">
    <value>Videos</value>
  </data>
</root>